import TriggerEditor.SCArchive as sca;
import TriggerEditor.SCAWrapper as scw;
const Data = EUDArray(500*8);

const str1 = StringBuffer(1024);
const SCAStr = EUDArray(60*8);
const SettingSubtitle = PVariable();
const TRankTitle = PVariable();
const TRankTitle2 = PVariable();
const TRankTitle3 = PVariable();
const LinSubtitle = PVariable();
const RankTitle = PVariable();
const RankTitle2 = PVariable();
const RankTitle3 = PVariable();
const TesterFlag =  PVariable();


const MapMakerFlag = PVariable();
const AnnounceFlag = PVariable();
const WhisperFlag = PVariable();
const LSpeakerFlag = PVariable();
const DayCheck = PVariable();
const DayCheck2 = PVariable();
const SubtitleData = [Db(60*4),Db(60*4),Db(60*4),Db(60*4),Db(60*4),Db(60*4),Db(60*4),Db(60*4)];
const AnnounceData = [Db(60*4),Db(60*4),Db(60*4),Db(60*4),Db(60*4),Db(60*4),Db(60*4),Db(60*4)];
const WhisperData = [Db(60*4),Db(60*4),Db(60*4),Db(60*4),Db(60*4),Db(60*4),Db(60*4),Db(60*4)];
const LSpeakerData = [Db(60*4),Db(60*4),Db(60*4),Db(60*4),Db(60*4),Db(60*4),Db(60*4),Db(60*4)];

function onPluginStart(){
	SetMemory(0x58f600,SetTo,Data);//데이터 시작지점 저장

//	const a = 0x6D0F48; //방이름
//	const b = 0x6D0F78; //방장닉
//	const c = Db("");
//	if(strcmp(a, b) == 0){foreach(cp : EUDLoopPlayer('Human', None, None)){setcurpl(cp); DisplayText("\x13\x1BUDP 플레이는 금지하고 있습니다. 배틀넷에서 플레이 해주세요."); SetMemory(0xCDDDCDDC,SetTo,1);}}
//	if(strcmp(b, c) == 0){foreach(cp : EUDLoopPlayer('Human', None, None)){setcurpl(cp); DisplayText("\x13\x1B싱글플레이로는 플레이할 수 없습니다. 멀티플레이로 시작해주세요."); SetMemory(0xCDDDCDDC,SetTo,1);}}
//	else if(Memory(0x51CE84,AtLeast,1001)){foreach(cp : EUDLoopPlayer('Human', None, None)){setcurpl(cp); DisplayText("\x13\x1B방 제목에서 배속 옵션을 제거해 주십시오.\n\x13\x1B또는 게임 반응속도(턴레이트)를 최대로 올려주십시오."); SetMemory(0xCDDDCDDC,SetTo,1);}}
	
	sca.Init();
}
function beforeTriggerExec(){
	sca.Exec();


once{
DoActions(SetSwitch("Switch 189",Set));
}

DoActions(SetSwitch("Switch 1",Clear));



	const T1 = PVariable(); // 저장,불러오기 버튼 작동 지연 타이머
	const s=StringBuffer();
	const Nick1 = PVariable(list(1,1,1,1,1,1,1,1)); // 칭호 식별자
	const LoadCheck = PVariable();
	const KillCode = PVariable();
	const SCA_GLoaded = PVariable();
	const NBAlarm = PVariable();
	const T2 = PVariable(); // 타임아웃타이머
	const Rankst = PVariable();
	const Rankst2 = PVariable();
	const RankNum = PVariable();
	const RankNum2 = PVariable();
	const RankNum3 = PVariable();
	const TSettingSubtitle = PVariable();
	const CustomSubTitleEnabled = PVariable();
	const RankName = [Db("st"),Db("nd"),Db("rd"),Db("th")];
	const LoadSlot = PVariable();
	var GLoadCheck;
	var CurVer;
	//if(ElapsedTime(AtLeast,90)){
	foreach(cp : EUDLoopPlayer("Human")){
		setcurpl(cp);
		if(Deaths(CurrentPlayer,Exactly,1,2)){
			SCA_GLoaded[0] = 0;
			SCA_GLoaded[1] = 0;
			SCA_GLoaded[2] = 0;
			SCA_GLoaded[3] = 0;
			SCA_GLoaded[4] = 0;
			SCA_GLoaded[5] = 0;
			SCA_GLoaded[6] = 0;
			sca.GlobalData[0] = 0;
			
		}
		if(sca.GlobalData[0]==1&&1<=sca.Month&&SCA_GLoaded[cp]==0){ // 글로벌데이터 불러오기 성공시 이벤트여부, 현재버전등등 알려줌 + 개인데이터 불러옴 
			if(LoadCheck[cp] == 0){
			CurVer = dwread_epd(EPD(0x58f454));//TEP에서 입력한 버전정보 불러옴
			if(sca.GlobalData[1] != CurVer && LoadCheck[cp] == 0 && CurVer < sca.GlobalData[1]){ // 구버전, 지원종료
				f_eprintln("\x04현재 최신버전이 아닙니다! 해당 맵은 \x03SCArchive \x07지원이 \x08종료\x04되었습니다. 최신버전을 이용해주세요.");
				PlayWAV("sound\\Bullet\\tscFir00.wav");
				LoadCheck[cp] = 1;
				GLoadCheck = 0;
			}
			else{ // 최신버전이다
				LoadCheck[cp] = 1;
				GLoadCheck = 1;
			}
			} 
			//DisplayText("\x13\x07『 \x03SYSTEM \x04: GlobalData Loaded \x07』");
			SCA_GLoaded[cp] = 1;
				for (var i = 0; i < 20; i++) {
					SetDeaths(EPD(0x58f60C)+i,SetTo,sca.GlobalData[i],0);
				}
					SetDeaths(EPD(0x58f60C)+20,SetTo,sca.Year+0x32232232,0);
					SetDeaths(EPD(0x58f60C)+21,SetTo,sca.Month+0x32232232,0);
					SetDeaths(EPD(0x58f60C)+22,SetTo,sca.Hour+0x32232232,0);
					SetDeaths(EPD(0x58f60C)+23,SetTo,sca.Day+0x32232232,0);
					SetDeaths(EPD(0x58f60C)+24,SetTo,sca.Week+0x32232232,0);
					SetDeaths(EPD(0x58f60C)+25,SetTo,sca.Min+0x32232232,0);
					
					
					
		}
	//var css;
	//if(Deaths(cp,AtLeast,1,494)){
	//css-=1;
	//}
	//if(Deaths(cp,AtLeast,1,502)){
	//css+=1;
	//}
	//f_eprintln(css," TMapMakerFlag : ",dwread_epd(EPD(TMapMakerFlag)+css));

		if(GLoadCheck==1&&CurVer < sca.GlobalData[2] && sca.GlobalData[2] <= CurVer+1){
		GLoadCheck = 0;
		KillCode[0] = 1;
		KillCode[1] = 1;
		KillCode[2] = 1;
		KillCode[3] = 1;
		KillCode[4] = 1;
		KillCode[5] = 1;
		KillCode[6] = 1;
		f_eprintln("\x04해당 맵은 현시간 부로 \x03SCArchive \x07지원이 \x08종료\x04되었습니다. 최신버전을 이용해주세요.");
		}
		//if(CurVer < sca.GlobalData[2]){
		//DisplayText("\x08신버전 감지! \x04해당 버전은 \x03SCArchive \x07지원이 \x04추후 \x08종료\x04됩니다.");
		//}

		if(KillCode[cp]==1){
			DisplayText("\x04해당 맵은 현시간 부로 \x03SCArchive \x07지원이 \x08종료\x04되었습니다. 최신버전을 이용해주세요.");
		}



	
		if(Deaths(CurrentPlayer,Exactly,1,2)){//2번데스값에서 1번 신호가 온 경우
			//scw.scaLoadGlobal(SCmp);
			sca.LoadGlobalData();

		}

		if(Deaths(CurrentPlayer,Exactly,2,2)){//2번데스값에서 2번 신호가 온 경우
			//scw.scaLoadTime(SCmp);
			sca.LoadTime();
		}

		if(GLoadCheck==1){
			//슬롯별 데이터 관리
			//0번 DPS데이터, 수표, 게임플레이 시간
			//1번 몇번불러올지 지정
			//2번 SetTo DPS데이터
			//3번 Add DPS데이터, sub DPS데이터 (음수로 관리)
			//4번 커스텀칭호(로드용)
			//5번 탐택 및 랩 랭킹(로드용)(밴플레그는 닉변으로인해 사용불가처리할때 사용)
			//6번 공지 채팅
			//7번 본인, 귓말 채팅
			//8번 확성기 채팅
			//9번 44, 45, 46, 47, 48방어권

			if(Deaths(CurrentPlayer,Exactly,3,2)){//2번데스값에서 3번 신호가 온 경우
				//scw.scaLoad(0,SCmp);
				sca.LoadData(0);
			}
			if(Deaths(CurrentPlayer,Exactly,4,2)){//2번데스값에서 4번 신호가 온 경우
				NBAlarm[cp] = 0;
				RankTitle[cp] = 0;
				RankTitle2[cp] = 0;
				RankTitle3[cp] = 0;
				SettingSubtitle[cp] = TSettingSubtitle[cp];
				
				for (var i = 0; i < 60; i++){
					SCAStr[(60*cp)+i] = 0;
				} 
				//scw.scaSave(0,SCmp);
				sca.SaveData(0);
			    //f_eprintln("\x03SCArchive\x04에 \x07게임 데이터\x04를 저장하고 있습니다...");
			}
			if(Deaths(CurrentPlayer,Exactly,9,2)){//2번데스값에서 10번 신호=1번슬롯에 저장하라 신호가 온 경우
				NBAlarm[cp] = 0;
				RankTitle[cp] = 0;
				RankTitle2[cp] = 0;
				RankTitle3[cp] = 0;
				MapMakerFlag[cp] = 0;
				DayCheck2[cp] = 0;
				SettingSubtitle[cp] = 0;
				TesterFlag[cp] = 0;
				
				for (var i = 0; i < 60; i++){
					SCAStr[(60*cp)+i] = 0;
				} 
				//str1.print("\x13\x07『 \x03Slot : \x0410 \x07Saving...\x07 』");
				//scw.scaSave(1,SCmp);
				sca.SaveData(10);
				LoadSlot[cp]=0;
			    //f_eprintln("\x03SCArchive\x04에 \x07게임 데이터\x04를 저장하고 있습니다...");

			}
			
			if(Deaths(CurrentPlayer,Exactly,10,2)){//2번데스값에서 10번 신호=1번슬롯에 저장하라 신호가 온 경우
				NBAlarm[cp] = 0;
				RankTitle[cp] = 0;
				RankTitle2[cp] = 0;
				RankTitle3[cp] = 0;
				MapMakerFlag[cp] = 0;
				DayCheck2[cp] = 0;
				SettingSubtitle[cp] = 0;
				TesterFlag[cp] = 0;
				
				for (var i = 0; i < 60; i++){
					SCAStr[(60*cp)+i] = 0;
				} 
				//str1.print("\x13\x07『 \x03Slot : \x041 \x07Saving...\x07 』");
				//scw.scaSave(1,SCmp);
				sca.SaveData(1);
				LoadSlot[cp]=0;
			    //f_eprintln("\x03SCArchive\x04에 \x07게임 데이터\x04를 저장하고 있습니다...");

			}
			
			if(Deaths(CurrentPlayer,AtLeast,11,2)){//2번데스값에서 11번 이상의 신호가 온 경우
				LoadSlot[cp] = dwread_epd(EPD(0x58A364 + 48 * 2 + 4 * cp))-10;
				//scw.scaLoad(LoadSlot[cp],SCmp);
				sca.LoadData(LoadSlot[cp]);
				//str1.print("\x13\x07『 \x03Slot : \x04",LoadSlot[cp]," \x0FLoading... \x07』");
			}
			
		}
		if (LoadCheck[cp]==1 && GLoadCheck == 0){
			SetDeaths(CurrentPlayer,SetTo,0,1);
		}
		else{
		if (sca.ConnectStatus() == 1){//SCA가용상태 인식
			SetDeathsX(CurrentPlayer,SetTo,1,1,1);
		}
		else{
			SetDeathsX(CurrentPlayer,SetTo,0,1,1);
		}
/***
 * @Summary.ko-KR
 * 0 = 대기
 * 1 = 불러오는 중
 * 2 = 시간 불러오는 중
 * 3 = 맵 변수 불러오는 중
 * 4 = 저장중
 * 6 = 패스트로드 : 한명 로드시 전부 6됨
***/


		if (sca.CommandStatus() == 0){
			SetDeathsX(CurrentPlayer,SetTo,2,1,2);
		}
		else{
			SetDeathsX(CurrentPlayer,SetTo,0,1,2);
		}

		
/***
 * @Summary.ko-KR
 * 1 = 연결됨
 * 2 = 연결 끊킴
 * 3 = 로드중
 * 4 = 로드 완료
 * 5 = 세이브중
 * 6 = 세이브 완료
 * 7 = 런처와 먼저 연결하세요
 * 8 = 다른 작업 중입니다.
 * 9 = 작업 실패
 * 10 = 명령 실행
 * 11 = 시간 로드
 * 12 = 글로벌데이터 로드
***/
		if (sca.GetLastMessage() == 4){ // 로드완료일경우 
			SetDeathsX(CurrentPlayer,SetTo,4,1,4);
			
			//if (LoadSlot[cp]==0){//메인 슬롯 로드완료시 맨처음 1회만 옮김??
			//}
			

			if (LoadSlot[cp]==0){
				TSettingSubtitle[cp] = SettingSubtitle[cp];
			}

			if (LoadSlot[cp]==4){
				if (SCAStr[(60*cp)+0]>=1){
				CustomSubTitleEnabled[cp]=1;// 칭호 데이터 감지여부
				for (var i = 0; i < 60; i++){
					SetDeaths(EPD(SubtitleData[cp])+i,SetTo,SCAStr[(60*cp)+i],0);
				} 
				}
				else {
				CustomSubTitleEnabled[cp]=0;// 칭호 데이터 감지여부
				for (var i = 0; i < 60; i++){
					SetDeaths(EPD(SubtitleData[cp])+i,SetTo,0,0);
					
				} 
				}
				LoadSlot[cp]=1;
			}
			
			if (LoadSlot[cp]==5){
				TRankTitle[cp] = RankTitle[cp];
				TRankTitle2[cp] = RankTitle2[cp];
				TRankTitle3[cp] = RankTitle3[cp];
				LoadSlot[cp]=1;
			}
			if (LoadSlot[cp]>=1){
				SetDeathsX(CurrentPlayer,SetTo,64,1,64);//슬롯로드완료일경우
			}
			if (LoadSlot[cp]==6){ // 공지
				for (var i = 0; i < 60; i++){
					SetDeaths(EPD(AnnounceData[cp])+i,SetTo,SCAStr[(60*cp)+i],0);
				} 
				LoadSlot[cp]=1;
				AnnounceFlag[cp] = 2000;
			}
			if (LoadSlot[cp]==7){ // 귓말
				for (var i = 0; i < 60; i++){
					SetDeaths(EPD(WhisperData[cp])+i,SetTo,SCAStr[(60*cp)+i],0);
				} 
				LoadSlot[cp]=1;
				WhisperFlag[cp] = 2000;
			}
			if (LoadSlot[cp]==8){ // 확성기
				for (var i = 0; i < 60; i++){
					SetDeaths(EPD(LSpeakerData[cp])+i,SetTo,SCAStr[(60*cp)+i],0);
				} 
				LoadSlot[cp]=1;
				LSpeakerFlag[cp] = 2000;
			}




		}
		else{
			SetDeathsX(CurrentPlayer,SetTo,0,1,4);
		}


		if (sca.GetLastMessage() == 11) {// 시간 로드완료일경우
			SetDeathsX(CurrentPlayer,SetTo,16,1,16);
		}
		else{
			SetDeathsX(CurrentPlayer,SetTo,0,1,16);
		}


		if (sca.GetLastMessage() == 12) {// 글로벌데이터 로드완료일경우
			SetDeathsX(CurrentPlayer,SetTo,32,1,32);
		}
		else{
			SetDeathsX(CurrentPlayer,SetTo,0,1,32);
		}

		if (sca.GetLastMessage() == 6){
			SetDeathsX(CurrentPlayer,SetTo,8,1,8);

		if(NBAlarm[cp]==0&&CurVer < sca.GlobalData[1]){
			NBAlarm[cp] = 1;
			PlayWAV("sound\\Bullet\\tscFir00.wav");
			PlayWAV("sound\\Bullet\\tscFir00.wav");
			DisplayText("\x08신버전 감지! \x04해당 버전은 \x03SCArchive \x07지원이 \x04추후 \x08종료\x04됩니다. 현재 저장은 정상적으로 됩니다.");
		}
		}
		else{
			SetDeathsX(CurrentPlayer,SetTo,0,1,8);
		}
		
		}
		

		SetDeaths(CurrentPlayer,SetTo,0,2);//신호 초기화
		
		//TRankTitle[cp] = 1;
		//TRankTitle2[cp] = 2;
		//TRankTitle3[cp] = 3;
		//48번유닛은 칭호사용가능 여부 전달인자
		//LinSubtitle
		

		
		
	}
	
	
	
	
}
