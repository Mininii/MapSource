import TriggerEditor.SCArchive as sca;

const MapMakerFlag = PVariable();
const PLevel = PVariable();
const StatP = PVariable();
const StatIncome = PVariable();
const StatTotalEPer = PVariable();
const StatTotalEPer2 = PVariable();
const StatTotalEPer3 = PVariable();
const StatUpgrade = PVariable();
const Credit32 = PVariable();
const Credit64 = PVariable();
const PEXP32 = PVariable();
const PEXP64 = PVariable();
const TotalExp32 = PVariable();
const TotalExp64 = PVariable();
const CurEXP32 = PVariable();
const CurEXP64 = PVariable();
const TesterFlag = PVariable();
const BanFlag = PVariable();
const AddSc = PVariable();
const PStatVer = PVariable();
const PlayTime = PVariable();
const PlayTime2 = PVariable();
const CreditAddSC = PVariable();
const LV5Cool = PVariable();
const BanFlag2 = PVariable();
const BanFlag3 = PVariable();
const BanFlag4 = PVariable();
const StatTotalEPer4 = PVariable();
const StatBreakShield = PVariable();
const StatTotalEPerEx = PVariable();
const TimeAttackScore = PVariable();
const PUnitLevel = PVariable();
const PUnitClass = PVariable();
const VaccItem = PVariable();
const CSCooldown = PVariable();
const CSAtk = PVariable();
const CSEXP = PVariable();
const CSTotalEPer = PVariable();
const CSTotalEper4 = PVariable();
const CSDPSLV = PVariable();
const RandomSeed1 = PVariable();
const RandomSeed2 = PVariable();
const RandomSeed3 = PVariable();
const RandomSeed4 = PVariable();
const RandomSeed5 = PVariable();
const RandomSeed6 = PVariable();
const RandomSeed7 = PVariable();
const RandomSeed8 = PVariable();
const RandomSeed9 = PVariable();
const RandomSeed10 = PVariable();
const StatTotalEPerEx2 = PVariable();
const StatTotalEPerEx3 = PVariable();
const StatSCCool = PVariable();
const PETicket = PVariable();
const CSBreakShield = PVariable();
const SellTicket = PVariable();
const CurMission = PVariable();
const DayCheck = PVariable();
const DayCheck2 = PVariable();
const YearCheck = PVariable();
const MonthCheck = PVariable();
const BanFlag5 = PVariable();
const BanFlag6 = PVariable();
const BanFlag7 = PVariable();
const BanFlag8 = PVariable();
const RankTitle = PVariable();

const StatTotalEPer4X = PVariable();
const StatBreakShield2 = PVariable();
var Asm_Arrptr;
function onPluginStart(){
sca.Init();
}
function afterTriggerExec(){
if(Memory(5830260,AtLeast,1)){

once{
	Asm_Arrptr = dwread_epd(EPD(5830260));
var focus = 87;
SetDeaths(Asm_Arrptr,SetTo,EPD(MapMakerFlag)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(PLevel)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(StatP)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(StatIncome)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(StatTotalEPer)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(StatTotalEPer2)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(StatTotalEPer3)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(StatUpgrade)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(Credit32)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(Credit64)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(PEXP32)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(PEXP64)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(TotalExp32)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(TotalExp64)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(CurEXP32)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(CurEXP64)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(TesterFlag)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(BanFlag)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(AddSc)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(PStatVer)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(PlayTime)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(PlayTime2)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(CreditAddSC)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(LV5Cool)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(BanFlag2)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(BanFlag3)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(BanFlag4)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(StatTotalEPer4)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(StatBreakShield)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(StatTotalEPerEx)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(TimeAttackScore)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(PUnitLevel)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(PUnitClass)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(VaccItem)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(CSCooldown)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(CSAtk)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(CSEXP)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(CSTotalEPer)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(CSTotalEper4)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(CSDPSLV)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(RandomSeed1)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(RandomSeed2)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(RandomSeed3)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(RandomSeed4)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(RandomSeed5)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(RandomSeed6)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(RandomSeed7)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(RandomSeed8)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(RandomSeed9)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(RandomSeed10)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(StatTotalEPerEx2)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(StatTotalEPerEx3)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(StatSCCool)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(PETicket)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(CSBreakShield)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(SellTicket)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(CurMission)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(DayCheck)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(DayCheck2)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(YearCheck)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(MonthCheck)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(BanFlag5)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(BanFlag6)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(BanFlag7)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(BanFlag8)+focus,0);
Asm_Arrptr+=1;
SetDeaths(Asm_Arrptr,SetTo,EPD(RankTitle)+focus,0);
Asm_Arrptr+=1;
SetMemory(5830260,SetTo,0);	
}
}
}

function beforeTriggerExec(){
	sca.Exec();
	const T1 = PVariable(); // 저장,불러오기 버튼 작동 지연 타이머
	const s=StringBuffer();
	const Nick1 = PVariable(list(1,1,1,1,1,1,1,1)); // 칭호 식별자
	const LoadCheck = PVariable();
	const KillCode = PVariable();
	const SCA_GLoaded = PVariable();
	const NBAlarm = PVariable();
	const T2 = PVariable(); // 타임아웃타이머
	
	var GLoadCheck;
	var CurVer;
	foreach(cp : EUDLoopPlayer("Human")){
		setcurpl(cp);
		if(Deaths(CurrentPlayer,Exactly,1,2)){
			SCA_GLoaded[0] = 0;
			SCA_GLoaded[1] = 0;
			SCA_GLoaded[2] = 0;
			SCA_GLoaded[3] = 0;
			SCA_GLoaded[4] = 0;
			SCA_GLoaded[5] = 0;
			SCA_GLoaded[6] = 0;
			sca.GlobalData[0] = 0;
			
		}
		if(sca.GlobalData[0]==1&&1<=sca.Month&&SCA_GLoaded[cp]==0){ // 글로벌데이터 불러오기 성공시 이벤트여부, 현재버전등등 알려줌 + 개인데이터 불러옴 
			if(LoadCheck[cp] == 0){
			CurVer = dwread_epd(EPD(0x58f608));//TEP에서 입력한 버전정보 불러옴
			if(sca.GlobalData[1] != CurVer && LoadCheck[cp] == 0 && CurVer < sca.GlobalData[1]){ // 구버전, 지원종료
				f_eprintln("\x04현재 최신버전이 아닙니다! 해당 맵은 \x03SCArchive \x07지원이 \x08종료\x04되었습니다. 최신버전을 이용해주세요.");
				PlayWAV("sound\\Bullet\\tscFir00.wav");
				LoadCheck[cp] = 1;
				GLoadCheck = 0;
			}
			else{ // 최신버전이다
				LoadCheck[cp] = 1;
				GLoadCheck = 1;
			}
			} 
			DisplayText("\x13\x07『 \x03SYSTEM \x04: GlobalData Loaded \x07』");
			SCA_GLoaded[cp] = 1;
				for (var i = 0; i < 20; i++) {
					SetDeaths(EPD(0x58f60C)+i,SetTo,sca.GlobalData[i],0);
				}
					SetDeaths(EPD(0x58f60C)+20,SetTo,sca.Year+0x32232232,0);
					SetDeaths(EPD(0x58f60C)+21,SetTo,sca.Month+0x32232232,0);
					SetDeaths(EPD(0x58f60C)+22,SetTo,sca.Hour+0x32232232,0);
					SetDeaths(EPD(0x58f60C)+23,SetTo,sca.Day+0x32232232,0);
					SetDeaths(EPD(0x58f60C)+24,SetTo,sca.Week+0x32232232,0);
					SetDeaths(EPD(0x58f60C)+25,SetTo,sca.Min+0x32232232,0);
					
					
					
		}
	//var css;
	//if(Deaths(cp,AtLeast,1,494)){
	//css-=1;
	//}
	//if(Deaths(cp,AtLeast,1,502)){
	//css+=1;
	//}
	//f_eprintln(css," MapMakerFlag : ",dwread_epd(EPD(MapMakerFlag)+css));

		if(GLoadCheck==1&&CurVer < sca.GlobalData[2] && sca.GlobalData[2] <= CurVer+1){
		GLoadCheck = 0;
		KillCode[0] = 1;
		KillCode[1] = 1;
		KillCode[2] = 1;
		KillCode[3] = 1;
		KillCode[4] = 1;
		KillCode[5] = 1;
		KillCode[6] = 1;
		f_eprintln("\x04해당 맵은 현시간 부로 \x03SCArchive \x07지원이 \x08종료\x04되었습니다. 최신버전을 이용해주세요.");
		}
		//if(CurVer < sca.GlobalData[2]){
		//DisplayText("\x08신버전 감지! \x04해당 버전은 \x03SCArchive \x07지원이 \x04추후 \x08종료\x04됩니다.");
		//}

		if(KillCode[cp]==1){
			DisplayText("\x04해당 맵은 현시간 부로 \x03SCArchive \x07지원이 \x08종료\x04되었습니다. 최신버전을 이용해주세요.");
		}



	
		if(Deaths(CurrentPlayer,Exactly,1,2)){//2번데스값에서 1번 신호가 온 경우
			sca.LoadGlobalData(); //
		}

		if(Deaths(CurrentPlayer,Exactly,2,2)){//2번데스값에서 2번 신호가 온 경우
			sca.LoadTime();
		}

		if(GLoadCheck==1){
			
			if(Deaths(CurrentPlayer,Exactly,3,2)){//2번데스값에서 3번 신호가 온 경우
				sca.LoadData(0);
			}
			if(Deaths(CurrentPlayer,Exactly,4,2)){//2번데스값에서 4번 신호가 온 경우
				NBAlarm[cp] = 0;
				sca.SaveData(0);
			    //f_eprintln("\x03SCArchive\x04에 \x07게임 데이터\x04를 저장하고 있습니다...");
			}
			
		}
		if (LoadCheck[cp]==1 && GLoadCheck == 0){
			SetDeaths(CurrentPlayer,SetTo,0,1);
		}
		else{
		if (sca.ConnectStatus() == 1){//SCA가용상태 인식
			SetDeathsX(CurrentPlayer,SetTo,1,1,1);
		}
		else{
			SetDeathsX(CurrentPlayer,SetTo,0,1,1);
		}
/***
 * @Summary.ko-KR
 * 0 = 대기
 * 1 = 불러오는 중
 * 2 = 시간 불러오는 중
 * 3 = 맵 변수 불러오는 중
 * 4 = 저장중
***/


		if (sca.CommandStatus() == 0){
			SetDeathsX(CurrentPlayer,SetTo,2,1,2);
		}
		else{
			SetDeathsX(CurrentPlayer,SetTo,0,1,2);
		}
		
/***
 * @Summary.ko-KR
 * 1 = 연결됨
 * 2 = 연결 끊킴
 * 3 = 로드중
 * 4 = 로드 완료
 * 5 = 세이브중
 * 6 = 세이브 완료
 * 7 = 런처와 먼저 연결하세요
 * 8 = 다른 작업 중입니다.
 * 9 = 작업 실패
***/
		if (sca.GetLastMessage() == 4){
			SetDeathsX(CurrentPlayer,SetTo,4,1,4);
		}
		else{
			SetDeathsX(CurrentPlayer,SetTo,0,1,4);
		}
		if (sca.GetLastMessage() == 6){
			SetDeathsX(CurrentPlayer,SetTo,8,1,8);

		if(NBAlarm[cp]==0&&CurVer < sca.GlobalData[1]){
			NBAlarm[cp] = 1;
			PlayWAV("sound\\Bullet\\tscFir00.wav");
			PlayWAV("sound\\Bullet\\tscFir00.wav");
			DisplayText("\x08신버전 감지! \x04해당 버전은 \x03SCArchive \x07지원이 \x04추후 \x08종료\x04됩니다. 현재 저장은 정상적으로 됩니다.");
		}

		}
		else{
			SetDeathsX(CurrentPlayer,SetTo,0,1,8);
		}
		
		}
		

		SetDeaths(CurrentPlayer,SetTo,0,2);//신호 초기화
		
		if(MapMakerFlag[cp]==1){
		
		SetPNamef(cp,"\x07[\x03M\x04ap\x10 M\x04aker\x07] {:c}{:n}",cp,cp);
		}
		else if (TesterFlag[cp]==1) {
		SetPNamef(cp,"\x07[\x11T\x04ester \x1FU\x04ser\x07] {:c}{:n}",cp,cp);
		}
	}
}